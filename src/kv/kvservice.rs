// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub request_type: u32,
    pub client_id: u64,
    pub request_seq: u64,
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    pub op: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // uint32 request_type = 1;

    pub fn clear_request_type(&mut self) {
        self.request_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_type(&mut self, v: u32) {
        self.request_type = v;
    }

    pub fn get_request_type(&self) -> u32 {
        self.request_type
    }

    // uint64 client_id = 2;

    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }

    // uint64 request_seq = 3;

    pub fn clear_request_seq(&mut self) {
        self.request_seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_seq(&mut self, v: u64) {
        self.request_seq = v;
    }

    pub fn get_request_seq(&self) -> u64 {
        self.request_seq
    }

    // string key = 4;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        &self.key
    }

    // string value = 5;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }

    // string op = 6;

    pub fn clear_op(&mut self) {
        self.op.clear();
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: ::std::string::String) {
        self.op = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_op(&mut self) -> &mut ::std::string::String {
        &mut self.op
    }

    // Take field
    pub fn take_op(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.op, ::std::string::String::new())
    }

    pub fn get_op(&self) -> &str {
        &self.op
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.request_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_seq = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.op)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.request_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.request_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.request_seq != 0 {
            my_size += ::protobuf::rt::value_size(3, self.request_seq, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.value);
        }
        if !self.op.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.op);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.request_type != 0 {
            os.write_uint32(1, self.request_type)?;
        }
        if self.client_id != 0 {
            os.write_uint64(2, self.client_id)?;
        }
        if self.request_seq != 0 {
            os.write_uint64(3, self.request_seq)?;
        }
        if !self.key.is_empty() {
            os.write_string(4, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(5, &self.value)?;
        }
        if !self.op.is_empty() {
            os.write_string(6, &self.op)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "request_type",
                    |m: &Request| { &m.request_type },
                    |m: &mut Request| { &mut m.request_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &Request| { &m.client_id },
                    |m: &mut Request| { &mut m.client_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "request_seq",
                    |m: &Request| { &m.request_seq },
                    |m: &mut Request| { &mut m.request_seq },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &Request| { &m.key },
                    |m: &mut Request| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Request| { &m.value },
                    |m: &mut Request| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "op",
                    |m: &Request| { &m.op },
                    |m: &mut Request| { &mut m.op },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Request>(
                    "Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Request {
        static mut instance: ::protobuf::lazy::Lazy<Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Request,
        };
        unsafe {
            instance.get(Request::new)
        }
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.clear_request_type();
        self.clear_client_id();
        self.clear_request_seq();
        self.clear_key();
        self.clear_value();
        self.clear_op();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConfChgReq {
    // message fields
    pub id: u64,
    pub change_type: u32,
    pub node_id: u64,
    pub node_addr: ::std::string::String,
    pub node_kv_addr: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ConfChgReq {
    pub fn new() -> ConfChgReq {
        ::std::default::Default::default()
    }

    // uint64 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    pub fn get_id(&self) -> u64 {
        self.id
    }

    // uint32 change_type = 2;

    pub fn clear_change_type(&mut self) {
        self.change_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_change_type(&mut self, v: u32) {
        self.change_type = v;
    }

    pub fn get_change_type(&self) -> u32 {
        self.change_type
    }

    // uint64 node_id = 3;

    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = v;
    }

    pub fn get_node_id(&self) -> u64 {
        self.node_id
    }

    // string node_addr = 4;

    pub fn clear_node_addr(&mut self) {
        self.node_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_addr(&mut self, v: ::std::string::String) {
        self.node_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_addr(&mut self) -> &mut ::std::string::String {
        &mut self.node_addr
    }

    // Take field
    pub fn take_node_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_addr, ::std::string::String::new())
    }

    pub fn get_node_addr(&self) -> &str {
        &self.node_addr
    }

    // string node_kv_addr = 5;

    pub fn clear_node_kv_addr(&mut self) {
        self.node_kv_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_kv_addr(&mut self, v: ::std::string::String) {
        self.node_kv_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node_kv_addr(&mut self) -> &mut ::std::string::String {
        &mut self.node_kv_addr
    }

    // Take field
    pub fn take_node_kv_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.node_kv_addr, ::std::string::String::new())
    }

    pub fn get_node_kv_addr(&self) -> &str {
        &self.node_kv_addr
    }
}

impl ::protobuf::Message for ConfChgReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.change_type = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_addr)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.node_kv_addr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.change_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.change_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.node_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.node_addr);
        }
        if !self.node_kv_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.node_kv_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.change_type != 0 {
            os.write_uint32(2, self.change_type)?;
        }
        if self.node_id != 0 {
            os.write_uint64(3, self.node_id)?;
        }
        if !self.node_addr.is_empty() {
            os.write_string(4, &self.node_addr)?;
        }
        if !self.node_kv_addr.is_empty() {
            os.write_string(5, &self.node_kv_addr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConfChgReq {
        ConfChgReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "id",
                    |m: &ConfChgReq| { &m.id },
                    |m: &mut ConfChgReq| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "change_type",
                    |m: &ConfChgReq| { &m.change_type },
                    |m: &mut ConfChgReq| { &mut m.change_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "node_id",
                    |m: &ConfChgReq| { &m.node_id },
                    |m: &mut ConfChgReq| { &mut m.node_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_addr",
                    |m: &ConfChgReq| { &m.node_addr },
                    |m: &mut ConfChgReq| { &mut m.node_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "node_kv_addr",
                    |m: &ConfChgReq| { &m.node_kv_addr },
                    |m: &mut ConfChgReq| { &mut m.node_kv_addr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConfChgReq>(
                    "ConfChgReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConfChgReq {
        static mut instance: ::protobuf::lazy::Lazy<ConfChgReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConfChgReq,
        };
        unsafe {
            instance.get(ConfChgReq::new)
        }
    }
}

impl ::protobuf::Clear for ConfChgReq {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_change_type();
        self.clear_node_id();
        self.clear_node_addr();
        self.clear_node_kv_addr();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfChgReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfChgReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Reply {
    // message fields
    pub ok: bool,
    pub value: ::std::string::String,
    pub addrs: ::std::collections::HashMap<u64, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Reply {
    pub fn new() -> Reply {
        ::std::default::Default::default()
    }

    // bool ok = 1;

    pub fn clear_ok(&mut self) {
        self.ok = false;
    }

    // Param is passed by value, moved
    pub fn set_ok(&mut self, v: bool) {
        self.ok = v;
    }

    pub fn get_ok(&self) -> bool {
        self.ok
    }

    // string value = 2;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }

    // repeated .kv.Reply.AddrsEntry addrs = 3;

    pub fn clear_addrs(&mut self) {
        self.addrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_addrs(&mut self, v: ::std::collections::HashMap<u64, ::std::string::String>) {
        self.addrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addrs(&mut self) -> &mut ::std::collections::HashMap<u64, ::std::string::String> {
        &mut self.addrs
    }

    // Take field
    pub fn take_addrs(&mut self) -> ::std::collections::HashMap<u64, ::std::string::String> {
        ::std::mem::replace(&mut self.addrs, ::std::collections::HashMap::new())
    }

    pub fn get_addrs(&self) -> &::std::collections::HashMap<u64, ::std::string::String> {
        &self.addrs
    }
}

impl ::protobuf::Message for Reply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ok = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.addrs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 2;
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(3, &self.addrs);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(3, &self.addrs, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Reply {
        Reply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "ok",
                    |m: &Reply| { &m.ok },
                    |m: &mut Reply| { &mut m.ok },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Reply| { &m.value },
                    |m: &mut Reply| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(
                    "addrs",
                    |m: &Reply| { &m.addrs },
                    |m: &mut Reply| { &mut m.addrs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Reply>(
                    "Reply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Reply {
        static mut instance: ::protobuf::lazy::Lazy<Reply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Reply,
        };
        unsafe {
            instance.get(Reply::new)
        }
    }
}

impl ::protobuf::Clear for Reply {
    fn clear(&mut self) {
        self.clear_ok();
        self.clear_value();
        self.clear_addrs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Reply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Reply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MessageWrap {
    // message fields
    pub from_leader: bool,
    pub leader_id: u64,
    pub leader_kv_addr: ::std::string::String,
    pub addrs: ::std::collections::HashMap<u64, ::std::string::String>,
    pub kv_addrs: ::std::collections::HashMap<u64, ::std::string::String>,
    pub msg: ::protobuf::SingularPtrField<super::eraftpb::Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl MessageWrap {
    pub fn new() -> MessageWrap {
        ::std::default::Default::default()
    }

    // bool from_leader = 1;

    pub fn clear_from_leader(&mut self) {
        self.from_leader = false;
    }

    // Param is passed by value, moved
    pub fn set_from_leader(&mut self, v: bool) {
        self.from_leader = v;
    }

    pub fn get_from_leader(&self) -> bool {
        self.from_leader
    }

    // uint64 leader_id = 2;

    pub fn clear_leader_id(&mut self) {
        self.leader_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u64) {
        self.leader_id = v;
    }

    pub fn get_leader_id(&self) -> u64 {
        self.leader_id
    }

    // string leader_kv_addr = 3;

    pub fn clear_leader_kv_addr(&mut self) {
        self.leader_kv_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_leader_kv_addr(&mut self, v: ::std::string::String) {
        self.leader_kv_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leader_kv_addr(&mut self) -> &mut ::std::string::String {
        &mut self.leader_kv_addr
    }

    // Take field
    pub fn take_leader_kv_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.leader_kv_addr, ::std::string::String::new())
    }

    pub fn get_leader_kv_addr(&self) -> &str {
        &self.leader_kv_addr
    }

    // repeated .kv.MessageWrap.AddrsEntry addrs = 4;

    pub fn clear_addrs(&mut self) {
        self.addrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_addrs(&mut self, v: ::std::collections::HashMap<u64, ::std::string::String>) {
        self.addrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addrs(&mut self) -> &mut ::std::collections::HashMap<u64, ::std::string::String> {
        &mut self.addrs
    }

    // Take field
    pub fn take_addrs(&mut self) -> ::std::collections::HashMap<u64, ::std::string::String> {
        ::std::mem::replace(&mut self.addrs, ::std::collections::HashMap::new())
    }

    pub fn get_addrs(&self) -> &::std::collections::HashMap<u64, ::std::string::String> {
        &self.addrs
    }

    // repeated .kv.MessageWrap.KvAddrsEntry kv_addrs = 5;

    pub fn clear_kv_addrs(&mut self) {
        self.kv_addrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_kv_addrs(&mut self, v: ::std::collections::HashMap<u64, ::std::string::String>) {
        self.kv_addrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_kv_addrs(&mut self) -> &mut ::std::collections::HashMap<u64, ::std::string::String> {
        &mut self.kv_addrs
    }

    // Take field
    pub fn take_kv_addrs(&mut self) -> ::std::collections::HashMap<u64, ::std::string::String> {
        ::std::mem::replace(&mut self.kv_addrs, ::std::collections::HashMap::new())
    }

    pub fn get_kv_addrs(&self) -> &::std::collections::HashMap<u64, ::std::string::String> {
        &self.kv_addrs
    }

    // .eraftpb.Message msg = 6;

    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    pub fn has_msg(&self) -> bool {
        self.msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: super::eraftpb::Message) {
        self.msg = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut super::eraftpb::Message {
        if self.msg.is_none() {
            self.msg.set_default();
        }
        self.msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_msg(&mut self) -> super::eraftpb::Message {
        self.msg.take().unwrap_or_else(|| super::eraftpb::Message::new())
    }

    pub fn get_msg(&self) -> &super::eraftpb::Message {
        self.msg.as_ref().unwrap_or_else(|| super::eraftpb::Message::default_instance())
    }
}

impl ::protobuf::Message for MessageWrap {
    fn is_initialized(&self) -> bool {
        for v in &self.msg {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.from_leader = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.leader_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.leader_kv_addr)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.addrs)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.kv_addrs)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.from_leader != false {
            my_size += 2;
        }
        if self.leader_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.leader_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.leader_kv_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.leader_kv_addr);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(4, &self.addrs);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(5, &self.kv_addrs);
        if let Some(ref v) = self.msg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.from_leader != false {
            os.write_bool(1, self.from_leader)?;
        }
        if self.leader_id != 0 {
            os.write_uint64(2, self.leader_id)?;
        }
        if !self.leader_kv_addr.is_empty() {
            os.write_string(3, &self.leader_kv_addr)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(4, &self.addrs, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(5, &self.kv_addrs, os)?;
        if let Some(ref v) = self.msg.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageWrap {
        MessageWrap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "from_leader",
                    |m: &MessageWrap| { &m.from_leader },
                    |m: &mut MessageWrap| { &mut m.from_leader },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "leader_id",
                    |m: &MessageWrap| { &m.leader_id },
                    |m: &mut MessageWrap| { &mut m.leader_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "leader_kv_addr",
                    |m: &MessageWrap| { &m.leader_kv_addr },
                    |m: &mut MessageWrap| { &mut m.leader_kv_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(
                    "addrs",
                    |m: &MessageWrap| { &m.addrs },
                    |m: &mut MessageWrap| { &mut m.addrs },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeString>(
                    "kv_addrs",
                    |m: &MessageWrap| { &m.kv_addrs },
                    |m: &mut MessageWrap| { &mut m.kv_addrs },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::eraftpb::Message>>(
                    "msg",
                    |m: &MessageWrap| { &m.msg },
                    |m: &mut MessageWrap| { &mut m.msg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MessageWrap>(
                    "MessageWrap",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MessageWrap {
        static mut instance: ::protobuf::lazy::Lazy<MessageWrap> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MessageWrap,
        };
        unsafe {
            instance.get(MessageWrap::new)
        }
    }
}

impl ::protobuf::Clear for MessageWrap {
    fn clear(&mut self) {
        self.clear_from_leader();
        self.clear_leader_id();
        self.clear_leader_kv_addr();
        self.clear_addrs();
        self.clear_kv_addrs();
        self.clear_msg();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageWrap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageWrap {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fkvservice.proto\x12\x02kv\x1a\reraftpb.proto\"\xa2\x01\n\x07Reques\
    t\x12!\n\x0crequest_type\x18\x01\x20\x01(\rR\x0brequestType\x12\x1b\n\tc\
    lient_id\x18\x02\x20\x01(\x04R\x08clientId\x12\x1f\n\x0brequest_seq\x18\
    \x03\x20\x01(\x04R\nrequestSeq\x12\x10\n\x03key\x18\x04\x20\x01(\tR\x03k\
    ey\x12\x14\n\x05value\x18\x05\x20\x01(\tR\x05value\x12\x0e\n\x02op\x18\
    \x06\x20\x01(\tR\x02op\"\x95\x01\n\nConfChgReq\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\x04R\x02id\x12\x1f\n\x0bchange_type\x18\x02\x20\x01(\rR\nchang\
    eType\x12\x17\n\x07node_id\x18\x03\x20\x01(\x04R\x06nodeId\x12\x1b\n\tno\
    de_addr\x18\x04\x20\x01(\tR\x08nodeAddr\x12\x20\n\x0cnode_kv_addr\x18\
    \x05\x20\x01(\tR\nnodeKvAddr\"\x93\x01\n\x05Reply\x12\x0e\n\x02ok\x18\
    \x01\x20\x01(\x08R\x02ok\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\
    \x12*\n\x05addrs\x18\x03\x20\x03(\x0b2\x14.kv.Reply.AddrsEntryR\x05addrs\
    \x1a8\n\nAddrsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\x04R\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xf6\x02\n\x0bMe\
    ssageWrap\x12\x1f\n\x0bfrom_leader\x18\x01\x20\x01(\x08R\nfromLeader\x12\
    \x1b\n\tleader_id\x18\x02\x20\x01(\x04R\x08leaderId\x12$\n\x0eleader_kv_\
    addr\x18\x03\x20\x01(\tR\x0cleaderKvAddr\x120\n\x05addrs\x18\x04\x20\x03\
    (\x0b2\x1a.kv.MessageWrap.AddrsEntryR\x05addrs\x127\n\x08kv_addrs\x18\
    \x05\x20\x03(\x0b2\x1c.kv.MessageWrap.KvAddrsEntryR\x07kvAddrs\x12\"\n\
    \x03msg\x18\x06\x20\x01(\x0b2\x10.eraftpb.MessageR\x03msg\x1a8\n\nAddrsE\
    ntry\x12\x10\n\x03key\x18\x01\x20\x01(\x04R\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01\x1a:\n\x0cKvAddrsEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\x04R\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\
    \tR\x05value:\x028\x012[\n\tKVService\x12#\n\x07Operate\x12\x0b.kv.Reque\
    st\x1a\t.kv.Reply\"\0\x12)\n\nConfChange\x12\x0e.kv.ConfChgReq\x1a\t.kv.\
    Reply\"\026\n\x0bRaftService\x12'\n\x07sendMsg\x12\x0f.kv.MessageWrap\
    \x1a\t.kv.Reply\"\0J\xa8\x13\n\x06\x12\x04\x0e\0>\x01\n\xbf\x04\n\x01\
    \x0c\x12\x03\x0e\0\x122\xb4\x04\x20Copyright\x202015\x20gRPC\x20authors.\
    \n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\
    \x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\t\n\x02\x03\0\x12\x03\x0f\x07\x16\n\x08\n\x01\x02\x12\
    \x03\x10\x08\n\n.\n\x02\x06\0\x12\x04\x13\0\x17\x01\x1a\"\x20The\x20gree\
    ting\x20service\x20definition.\n\n\n\n\x03\x06\0\x01\x12\x03\x13\x08\x11\
    \n\x1f\n\x04\x06\0\x02\0\x12\x03\x15\x02*\x1a\x12\x20Sends\x20a\x20greet\
    ing\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x15\x06\r\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x15\x0f\x16\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x15!&\
    \n\x0b\n\x04\x06\0\x02\x01\x12\x03\x16\x020\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03\x16\x06\x10\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x16\x12\
    \x1c\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x16',\n\n\n\x02\x06\x01\x12\
    \x04\x19\0\x1b\x01\n\n\n\x03\x06\x01\x01\x12\x03\x19\x08\x13\n\x0b\n\x04\
    \x06\x01\x02\0\x12\x03\x1a\x02-\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x03\
    \x1a\x06\r\n\x0c\n\x05\x06\x01\x02\0\x02\x12\x03\x1a\x0e\x19\n\x0c\n\x05\
    \x06\x01\x02\0\x03\x12\x03\x1a$)\n=\n\x02\x04\0\x12\x04\x1e\0%\x01\x1a1\
    \x20The\x20request\x20message\x20containing\x20the\x20user's\x20name.\n\
    \n\n\n\x03\x04\0\x01\x12\x03\x1e\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x1f\x02\x1a\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x1f\x02\x1e\x11\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x1f\t\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1f\x18\x19\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x20\x02\x17\n\r\n\x05\x04\0\x02\x01\x04\x12\
    \x04\x20\x02\x1f\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x20\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x20\t\x12\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x20\x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\x03!\x02\x19\n\r\
    \n\x05\x04\0\x02\x02\x04\x12\x04!\x02\x20\x17\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03!\t\x14\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03!\x17\x18\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\"\x02\x11\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\"\x02!\x19\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\"\t\x0c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\"\x0f\x10\n\x0b\n\
    \x04\x04\0\x02\x04\x12\x03#\x02\x13\n\r\n\x05\x04\0\x02\x04\x04\x12\x04#\
    \x02\"\x11\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03#\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03#\t\x0e\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03#\
    \x11\x12\n\x0b\n\x04\x04\0\x02\x05\x12\x03$\x02\x10\n\r\n\x05\x04\0\x02\
    \x05\x04\x12\x04$\x02#\x13\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03$\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03$\t\x0b\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03$\x0e\x0f\n\n\n\x02\x04\x01\x12\x04'\0-\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03'\x08\x12\n\x0b\n\x04\x04\x01\x02\0\x12\x03(\x02\x10\
    \n\r\n\x05\x04\x01\x02\0\x04\x12\x04(\x02'\x14\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03(\t\x0b\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03(\x0e\x0f\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03)\x02\x19\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04)\x02(\x10\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03)\t\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03)\x17\x18\n\
    \x0b\n\x04\x04\x01\x02\x02\x12\x03*\x02\x15\n\r\n\x05\x04\x01\x02\x02\
    \x04\x12\x04*\x02)\x19\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03*\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03*\t\x10\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03*\x13\x14\n\x0b\n\x04\x04\x01\x02\x03\x12\x03+\x02\x17\n\
    \r\n\x05\x04\x01\x02\x03\x04\x12\x04+\x02*\x15\n\x0c\n\x05\x04\x01\x02\
    \x03\x05\x12\x03+\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03+\t\x12\
    \n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03+\x15\x16\n\x0b\n\x04\x04\x01\
    \x02\x04\x12\x03,\x02\x1a\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04,\x02+\
    \x17\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x04\x01\x12\x03,\t\x15\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03,\
    \x18\x19\n;\n\x02\x04\x02\x12\x040\04\x01\x1a/\x20The\x20response\x20mes\
    sage\x20containing\x20the\x20greetings\n\n\n\n\x03\x04\x02\x01\x12\x030\
    \x08\r\n\x0b\n\x04\x04\x02\x02\0\x12\x031\x04\x10\n\r\n\x05\x04\x02\x02\
    \0\x04\x12\x041\x040\x0f\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x031\x04\x08\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x031\t\x0b\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x031\x0e\x0f\n\x0b\n\x04\x04\x02\x02\x01\x12\x032\x04\x15\n\r\n\
    \x05\x04\x02\x02\x01\x04\x12\x042\x041\x10\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x032\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x032\x0b\x10\n\
    \x0c\n\x05\x04\x02\x02\x01\x03\x12\x032\x13\x14\n\x0b\n\x04\x04\x02\x02\
    \x02\x12\x033\x04!\n\r\n\x05\x04\x02\x02\x02\x04\x12\x043\x042\x15\n\x0c\
    \n\x05\x04\x02\x02\x02\x06\x12\x033\x04\x16\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x033\x17\x1c\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x033\x1f\x20\n\
    \n\n\x02\x04\x03\x12\x047\0>\x01\n\n\n\x03\x04\x03\x01\x12\x037\x08\x13\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x038\x04\x19\n\r\n\x05\x04\x03\x02\0\x04\
    \x12\x048\x047\x15\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x038\x04\x08\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x038\t\x14\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x038\x17\x18\n\x0b\n\x04\x04\x03\x02\x01\x12\x039\x04\x19\n\r\n\x05\
    \x04\x03\x02\x01\x04\x12\x049\x048\x19\n\x0c\n\x05\x04\x03\x02\x01\x05\
    \x12\x039\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x039\x0b\x14\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x039\x17\x18\n\x0b\n\x04\x04\x03\x02\x02\
    \x12\x03:\x04\x1e\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04:\x049\x19\n\x0c\
    \n\x05\x04\x03\x02\x02\x05\x12\x03:\x04\n\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03:\x0b\x19\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03:\x1c\x1d\n\
    \x0b\n\x04\x04\x03\x02\x03\x12\x03;\x04\"\n\r\n\x05\x04\x03\x02\x03\x04\
    \x12\x04;\x04:\x1e\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03;\x04\x17\n\
    \x0c\n\x05\x04\x03\x02\x03\x01\x12\x03;\x18\x1d\n\x0c\n\x05\x04\x03\x02\
    \x03\x03\x12\x03;\x20!\n\x0b\n\x04\x04\x03\x02\x04\x12\x03<\x04%\n\r\n\
    \x05\x04\x03\x02\x04\x04\x12\x04<\x04;\"\n\x0c\n\x05\x04\x03\x02\x04\x06\
    \x12\x03<\x04\x17\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03<\x18\x20\n\x0c\
    \n\x05\x04\x03\x02\x04\x03\x12\x03<#$\n\x0b\n\x04\x04\x03\x02\x05\x12\
    \x03=\x04\x1c\n\r\n\x05\x04\x03\x02\x05\x04\x12\x04=\x04<%\n\x0c\n\x05\
    \x04\x03\x02\x05\x06\x12\x03=\x04\x13\n\x0c\n\x05\x04\x03\x02\x05\x01\
    \x12\x03=\x14\x17\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03=\x1a\x1bb\x06p\
    roto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
